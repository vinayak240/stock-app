// <auto-generated />
using System;
using CompanyService.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompanyService.Migrations
{
    [DbContext(typeof(CompanyDbContext))]
    [Migration("20201212132401_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CompanyService.Entities.Company", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("BoardOfDirectors")
                        .HasColumnType("text");

                    b.Property<string>("CEO")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SectorName")
                        .HasColumnType("text");

                    b.Property<string>("StockExchanges")
                        .HasColumnType("text");

                    b.Property<float>("Turnover")
                        .HasColumnType("float");

                    b.HasKey("CompanyCode");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CompanyService.Entities.IPO", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime");

                    b.Property<float>("PricePerShare")
                        .HasColumnType("float");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("StockExchange")
                        .HasColumnType("text");

                    b.Property<int>("TotalShares")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CompanyCode");

                    b.ToTable("Ipos");
                });

            modelBuilder.Entity("CompanyService.Entities.StockPrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<string>("StockExchange")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CompanyCode");

                    b.ToTable("StockPrices");
                });

            modelBuilder.Entity("CompanyService.Entities.IPO", b =>
                {
                    b.HasOne("CompanyService.Entities.Company", "com")
                        .WithMany()
                        .HasForeignKey("CompanyCode");
                });

            modelBuilder.Entity("CompanyService.Entities.StockPrice", b =>
                {
                    b.HasOne("CompanyService.Entities.Company", "com")
                        .WithMany()
                        .HasForeignKey("CompanyCode");
                });
#pragma warning restore 612, 618
        }
    }
}
